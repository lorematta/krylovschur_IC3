

function [V, resid, it, Hsq, K] = Krylov_Schur_Av_restart(V,f,m,k, it)

%Attenzione!!! non funziona bene se k non Ã¨ molto piu piccolo di m 


it = it+1;
[V, H] = Arnoldi_Av(V,f,m);
Hsq = H(1:m,1:m);
[Q,T] = schur(Hsq);
lt = eig(T);

[~, idx] = sort(real(lt), "descend");

trov= idx(real(lt(idx)) > 1e-5); %parte reale positiva
k_ = sum(real(lt(idx)) > 1e-6);

% if isempty(trov)
%     disp("nessun autovalore wanted trovato.");
%     return;
% end

% Prendo i primi k autovalori con parte reale positiva
wanted = false(length(lt),1);
wanted(trov(1:min(k, length(trov)))) = true;
K = min (k, k_);

% riordino decomposizione di schur con eig selezionati
[Q_ord, ~] = ordschur(Q, T, wanted);   
%Qw = Q_ord(:, 1:min(length(trov),k)); %matrice ortogonale associata a autovalori wanted
Qw = Q_ord(:, 1:K);

%ricostruzione sottosp. di dimensione k
Vk = V * Qw; 
[Vk, ~] = qr(Vk, 0);
Hk = Qw'*Hsq*Qw;
%riespansione a V[nxm]
[V,H] = bloccoArnoldi_Av(Vk,f,m,K, Hk);

%verifica convergenza
Hsq = H(1:m,1:m); %Matrice quadrata di Hessemberg
[y,th] = eig(Hsq);

%riordino th di autovalori approssimati secondo wanted
[~, idx2] = sort(real(diag(th)), "descend");
th = th(idx2, idx2);
y = y(:, idx2);

    for i=1:K
        yi = y(:,i);
        xi = V*yi;
        li = th(i,i);
        resid(it,i) = norm(f(xi)-li*xi);
    end
    
end
