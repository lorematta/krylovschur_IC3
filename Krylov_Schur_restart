function [V, resid, it] = Krylov_Schur_restart(v,A,m,k,itmax)

%Attenzione!!! non funziona bene se k non Ã¨ molto piu piccolo di m 

res = 1;
it = 0;
V = Arnoldi(v,A,m);
resid = zeros(itmax,k);

while (res > 1e-5 && it<= itmax)
it = it+1;
Hsq = V'*A*V; %Matrice quadrata di Hessemberg
[Q,T] = schur(Hsq);
lt = eig(T);

[~, j] = sort(real(lt), "descend");

trov = j(real(lt(j)) > 0); %parte reale positiva

if isempty(trov)
    disp("nessun autovalore wanted trovato.");
    return;
end

% Prendo i primi k autovalori con parte reale positiva
wanted = false(length(lt),1);
wanted(trov(1:min(k, length(trov)))) = true;

% riordino decomposizione di schur con eig selezionati
[Q_ord, ~] = ordschur(Q, T, wanted);   
Qw = Q_ord(:, 1:min(length(trov),k)); %matrice ortogonale associata a autovalori wanted

%ricostruzione sottosp. di dimensione k
Vk = V * Qw; 
[Vk, ~] = qr(Vk, 0);
Hk = Qw'*Hsq*Qw;
%riespansione a V[nxm]
[V, Hsq] = bloccoArnoldi(Vk,A,m,k,Hk);

%verifica convergenza
%Hsq = V'*A*V; %Matrice quadrata di Hessemberg
[y,th] = eig(Hsq);

%riordino th secondo wanted
[~, j_] = sort(real(diag(th)), "descend");
th = th(j_, j_);
y = y(:, j_);

for i=1:k
    yi = y(:,i);
    xi = V*yi;
    li = th(i,i);
    resid(it,i) = norm(A*xi-li*xi);
end
res = max(resid(it,:));

end
end
